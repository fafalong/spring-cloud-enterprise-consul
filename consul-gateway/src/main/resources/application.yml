server:
  port: 8900
 
spring:        
    #限流redis server 
  redis:
    host: 10.2.3.19
    port: 6379
    database: 0
    
  cloud:
    gateway:
      discovery:
        locator:
          # 是否用service name 自动发现
          enabled: false
          lowerCaseServiceId: true
                
      default-filters:
      #全局配置    
      # 熔断降级配置
      - name: Hystrix
        args:
          name : default
          fallbackUri: 'forward:/defaultfallback'    
          
      #RequestRateLimiter can not be global until 2.1.0
      #https://github.com/spring-cloud/spring-cloud-gateway/pull/720   
      
      routes:
      - id: auth-service
        uri: lb://consul-auth-service
        predicates:
        - Path=/uaa/**
        filters:
        - StripPrefix=1
      
      
      - id: service-a
        uri: lb://consul-service-a
        predicates:
        - Path=/svca/**
        filters:
        - StripPrefix=1
        # redis限流 ， filter名称必须是RequestRateLimiter
        - name: RequestRateLimiter
          args:
                           # 使用SpEL名称引用Bean，与上面新建的RateLimiterConfig类中的bean的name相同
            key-resolver: '#{@urlPathKeyResolver}'
                            # 每秒最大访问次数
            redis-rate-limiter.replenishRate: 4
                            # 令牌桶最大容量
            redis-rate-limiter.burstCapacity: 4 
          
      - id: svcb
        uri: lb://consul-service-b
        predicates:
        - Path=/svcb/**
        filters:
        - StripPrefix=1
        - name: Hystrix
          args:
            name: fallback
            fallbackUri: 'forward:/fallback'        

      - id: rewritepath_route
        uri: https://blog.csdn.net
        predicates:
        - Path=/csdn/**
        filters:
        - RewritePath=/csdn/(?<segment>.*), /$\{segment}    
        
      - id: limit_route
        uri: http://www.baidu.com
        predicates:
        - Path=/baidu/**
        - After=2019-04-10T08:00:00.001-07:00[America/Denver]
        filters:
        - name: RequestRateLimiter
          args:
            key-resolver: '#{@remoteAddrKeyResolver}'
            redis-rate-limiter.replenishRate: 1
            redis-rate-limiter.burstCapacity: 1       



  sleuth:
    sampler:
      percentage: 1
      probability: 1.0 # 将采样比例设置为 1.0，也就是全部都需要。默认是 0.1
    integration:
      enabled: false
    scheduled:
      skip-pattern: "^org.*HystrixStreamTask$"
    web:
      client:
        enabled: true #web开启sleuth功能
      
  zipkin:
    base-url: http://${ZIPKIN-SERVER:zipkin-server}:9411      

#totally customized vars
#not solved, https://github.com/spring-cloud/spring-cloud-security/issues/61
authserver:
    #hostname: auth-service
    hostname: AUTH-SERVICE
    port: 8001
    contextPath: 

#https://docs.spring.io/spring-security-oauth2-boot/docs/current-SNAPSHOT/reference/htmlsingle/
security:
  oauth2:
    resource:
      user-info-uri: http://${authserver.hostname}:${authserver.port}${authserver.contextPath}/current
      #prefer-token-info: true # Use the token info, can be set to false to use the user info.

#HystrixDashboard
management:
  endpoints:
    web:
      exposure:
        #include: hystrix.stream, info, health
        include: "*"
      cors:
        allowed-origins: "*"
        allowed-methods: "*"
      #base-path: actuator //by default

turbine:
  app-config: consul-service-a,consul-service-b
  aggregator:
    clusterConfig: default
  clusterNameExpression: new String("default")
  combine-host: true
  instanceUrlSuffix:
    default: actuator/hystrix.stream  

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 3000 #默认：（方法上记得要加上@HystrixCommand，否则无效）
#          strategy: SEMAPHORE
feign:
  hystrix:
    enabled: true 
              
ribbon:
  ReadTimeout: 5000
  ConnectTimeout: 5000
  #https://github.com/spring-cloud/spring-cloud-security/issues/61
  http:
    client:
      enabled: true  
      

    
logging:
  level:
    root: INFO
    org.springframework: INFO   